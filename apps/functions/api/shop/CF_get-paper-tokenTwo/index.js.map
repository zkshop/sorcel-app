{"mappings":";;;;;AGQO,eAAe,0CAAM,OAAqB;IAC/C,MAAM,MAAM,MAAM,CAAA,GAAA,YAAI,EAAE,CAAA,GAAA,cAAM,EAAE,qBAAqB,IAAI,IAAI;QAC3D,QAAQ;QACR,SAAS;YACP,gBAAgB;YAChB,QAAQ;YAER,yBAAyB,CAAA,GAAA,cAAM,EAAE,aAAa;QAChD;QACA,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,OAAO,IAAI,IAAI;AACjB;AAEO,eAAe,0CAAyB,OAAqB;IAClE,MAAM,MAAM,MAAM,CAAA,GAAA,YAAI,EAAE,CAAA,GAAA,cAAM,EAAE,qBAAqB,IAAI,IAAI;QAC3D,QAAQ;QACR,SAAS;YACP,gBAAgB;YAChB,QAAQ;YAER,yBAAyB,CAAA,GAAA,cAAM,EAAE,aAAa;QAChD;QACA,MAAM,KAAK,SAAS,CAAC;IACvB;IAEA,QAAQ,GAAG,CAAC,OAAO,CAAA,GAAA,cAAM,EAAE,qBAAqB;IAChD,QAAQ,GAAG,CAAC,YAAY;QAAE,QAAQ,IAAI,IAAI,CAAC,MAAM;IAAC;IAElD,OAAO,IAAI,IAAI;AACjB;IAEA,2CAAe;YACb;WACA;AACF;;;ADnCO,eAAe,0CAAU,IAAY;IAC1C,MAAM,WAAW,CAAC;;;;;;;GAOjB,CAAC;IAEF,MAAM,UAAU;QACd,OAAO;QACP,WAAW;kBACT;QACF;IACF;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,CAAA,GAAA,wCAAK,EAAE,MAAM,CAAc;QAElD,IAAI,CAAC,SAAS,IAAI,EAAE,MAAM,IAAI,MAAM;QAEpC,OAAO,SAAS,IAAI,CAAC,cAAc;IACrC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;IAC5D;AACF;;;;AEpBO,eAAe,0CAAY,KAAa,EAAE,MAAc;IAC7D,MAAM,WAAW,CAAC;;;;;;;;KAQf,CAAC;IAEJ,MAAM,UAAU;QACd,OAAO;QACP,WAAW;mBACT;oBACA;QACF;IACF;IAEA,IAAI;QACF,MAAM,WAAW,MAAM,CAAA,GAAA,wCAAK,EAAE,MAAM,CAAe;QAEnD,OAAO,SAAS,IAAI,EAAE;IACxB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;IAC5D;AACF;;;AHrCO,MAAM,4CAAkB;IAC7B,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,+BAA+B;QAC/B,WAAW;YACT,MAAM,OAAO;gBAAE,IAAI;gBAAG,MAAM;YAAY;YACxC,QAAQ;QACV,GAAG;IACL;AACF;AAEA,MAAM,sCAAgB,OAAO;IAC3B,gCAAgC;IAChC,OAAO;QACL,MAAM;QACN,IAAI;QACJ,MAAM;QACN,WAAW,IAAI,OAAO,WAAW;IACnC;AACF;AAEA,MAAM,wCAAkB,OAAO,OAAe;IAC5C,kCAAkC;IAClC,OAAO;QACL,QAAQ;QACR,MAAM;QACN,IAAI;QACJ,OAAO;QACP,OAAO;QACP,WAAW,IAAI,OAAO,WAAW;IACnC;AACF;AAES,SAAS;IACd,OAAO;QACL,WAAW,OAAO;YAChB,MAAM,WAAW,MAAM,CAAA,GAAA,yCAAQ,EAAE;YAEjC,OAAO,YAAY;QACrB;QACA,aAAa,OAAO,OAAe;YACjC,MAAM,WAAW,MAAM,CAAA,GAAA,yCAAU,EAAE,OAAO;YAE1C,OAAO,YAAY;QACrB;IACF;AACF;;;AD3CF,MAAM,gCAAU,CAAA,GAAA,yCAAe;AAGxB,MAAM,4CAA8B,OAAO,KAAU;IAC1D,8BAAQ,SAAS,CAAC;IAClB,IAAI,IAAI,CAAC;AACT,iDAAiD;AAEjD,QAAQ;AACR,kDAAkD;AAElD,wCAAwC;AACxC,gBAAgB;AAChB,0BAA0B;AAE1B,+CAA+C;AAC/C,IAAI;AACN","sources":["apps/functions/api/shop/CF_get-paper-tokenTwo/src/index.ts","apps/functions/infra/SorcelAppCreator.ts","apps/functions/utils/createApp.ts","apps/functions/utils/hasura.ts","apps/functions/utils/createAdmin.ts"],"sourcesContent":["import { TokenService } from '@3shop/domains';\nimport { PaperWalletClient } from '@infra/PaperWalletClient';\nimport { INTERNAL_SERVER_ERROR, OK } from 'http-status';\nimport { HttpFunction } from '@google-cloud/functions-framework';\n// import {SorcelAppCreator} from '@infra/SorcelAppCreator';\nimport {SorcelAppCreator} from '../../../../infra/SorcelAppCreator';\nconst creator = SorcelAppCreator();\n// const Token = TokenService(PaperWalletClient());\n\nexport const getPaperToken: HttpFunction = async (req: any, res: any) => {\n  creator.createApp(\"test\");\n  res.send('getPaperToken');\n  // const { code } = req.body as { code: string };\n\n  // try {\n  //   const userToken = await Token.getToken(code);\n\n  //   res.status(OK).json({ userToken });\n  // } catch (e) {\n  //   console.error({ e });\n\n  //   res.status(INTERNAL_SERVER_ERROR).json(e);\n  // }\n};","import type { AppCreator } from '@3shop/domains';\nimport { createApp } from '../utils/createApp';\nimport { createAdmin } from '../utils/createAdmin';\n\nexport const testUserPromise = () => {\n  return new Promise((resolve, reject) => {\n    // Simulate async user creation\n    setTimeout(() => {\n      const user = { id: 1, name: 'Test User' };\n      resolve(user);\n    }, 1000);\n  });\n}\n\nconst createAppMock = async (name: string) => {\n  // Mocked response for createApp\n  return {\n    plan: \"pro\",\n    id: 'mocked-app-id',\n    name: name,\n    createdAt: new Date().toISOString(),\n  };\n}\n\nconst createAdminMock = async (email: string, appId: string) => {\n  // Mocked response for createAdmin\n  return {\n    app_id: \"test\",\n    role: \"test\",\n    id: 'mocked-admin-id',\n    email: email,\n    appId: appId,\n    createdAt: new Date().toISOString(),\n  };\n}\n\n  export function SorcelAppCreator(): AppCreator {\n    return {\n      createApp: async (name: string) => {\n        const response = await createApp(name);\n\n        return response || null;\n      },\n      createAdmin: async (email: string, appId: string) => {\n        const response = await createAdmin(email, appId);\n\n        return response || null;\n      },\n    };\n  }","import type { AppData } from '@3shop/domains';\nimport hasura from './hasura';\n\ninterface AppResponse {\n  data: {\n    insert_app_one: AppData;\n  };\n}\n\nexport async function createApp(name: string): Promise<AppData | undefined> {\n  const mutation = `\n  mutation CreateApp($name: String!) {\n    insert_app_one(object: {name: $name}) {\n      id\n      plan\n      name\n    }\n  }`;\n\n  const payload = {\n    query: mutation,\n    variables: {\n      name,\n    },\n  };\n\n  try {\n    const response = await hasura.mutate<AppResponse>(payload);\n\n    if (!response.data) throw new Error('No data returned from API');\n\n    return response.data.insert_app_one;\n  } catch (error) {\n    console.error('An error occurred while creating an app:', error);\n  }\n}\n","import { envVars } from '@3shop/config';\nimport axios from 'axios';\n\ntype QueryPayload = {\n  query: string;\n  variables?: object;\n};\n\nexport async function query(payload: QueryPayload) {\n  const res = await axios(envVars.PUBLIC_HASURA_API_URL || '', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n\n      'x-hasura-admin-secret': envVars.SECRET_HASURA,\n    },\n    data: JSON.stringify(payload),\n  });\n\n  return res.data;\n}\n\nexport async function mutate<T extends object>(payload: QueryPayload): Promise<T> {\n  const res = await axios(envVars.PUBLIC_HASURA_API_URL || '', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n\n      'x-hasura-admin-secret': envVars.SECRET_HASURA,\n    },\n    data: JSON.stringify(payload),\n  });\n\n  console.log('url', envVars.PUBLIC_HASURA_API_URL);\n  console.log('response', { errors: res.data.errors });\n\n  return res.data;\n}\n\nexport default {\n  mutate,\n  query,\n};\n","import hasura from './hasura';\n\ninterface UserData {\n  app_id: string;\n  email: string;\n  id: string;\n  role: string;\n}\n\ninterface UserResponse {\n  data: {\n    insert_user_one: UserData;\n  };\n}\n\nexport async function createAdmin(email: string, app_id: string): Promise<UserData | undefined> {\n  const mutation = `\n    mutation CreateUser($email: String!, $app_id: uuid!) {\n      insert_user_one(object: {email: $email, app_id: $app_id, role: \"CUSTOMER\"}) {\n        app_id\n        email\n        id\n        role\n      }\n    }`;\n\n  const payload = {\n    query: mutation,\n    variables: {\n      email,\n      app_id,\n    },\n  };\n\n  try {\n    const response = await hasura.mutate<UserResponse>(payload);\n\n    return response.data?.insert_user_one;\n  } catch (error) {\n    console.error('An error occurred while creating a user:', error);\n  }\n}\n"],"names":[],"version":3,"file":"index.js.map"}